// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebhelpChallengeBackend.Infrastructure.Data;

#nullable disable

namespace WebhelpChallengeBackend.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240107044914_CreateModelsForEmployeesApi")]
    partial class CreateModelsForEmployeesApi
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebhelpChallengeBackend.Domain.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Finanzas"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Talento Humano"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Mercadeo"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Operaciones"
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "Informática"
                        });
                });

            modelBuilder.Entity("WebhelpChallengeBackend.Domain.Entities.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaDeContratacion")
                        .HasColumnType("date");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroDeDocumento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaisId")
                        .HasColumnType("int");

                    b.Property<int>("SubAreaId")
                        .HasColumnType("int");

                    b.Property<int>("TipoDeDocumentoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("PaisId");

                    b.HasIndex("SubAreaId");

                    b.HasIndex("TipoDeDocumentoId");

                    b.ToTable("Empleados");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellidos = "Guardado Gil",
                            AreaId = 5,
                            FechaDeContratacion = new DateOnly(2024, 1, 6),
                            Nombres = "Fabio Ernesto",
                            NumeroDeDocumento = "062094829",
                            PaisId = 6,
                            SubAreaId = 11,
                            TipoDeDocumentoId = 1
                        },
                        new
                        {
                            Id = 2,
                            Apellidos = "Grande Chávez",
                            AreaId = 5,
                            FechaDeContratacion = new DateOnly(2024, 1, 6),
                            Nombres = "Kevin Armando",
                            NumeroDeDocumento = "062359236",
                            PaisId = 6,
                            SubAreaId = 10,
                            TipoDeDocumentoId = 1
                        },
                        new
                        {
                            Id = 3,
                            Apellidos = "Vásquez Rodriguez",
                            AreaId = 4,
                            FechaDeContratacion = new DateOnly(2024, 1, 6),
                            Nombres = "Kimberly Aronet",
                            NumeroDeDocumento = "123658522",
                            PaisId = 6,
                            SubAreaId = 9,
                            TipoDeDocumentoId = 1
                        },
                        new
                        {
                            Id = 4,
                            Apellidos = "Serrano López",
                            AreaId = 1,
                            FechaDeContratacion = new DateOnly(2024, 1, 6),
                            Nombres = "Nelson Alberto",
                            NumeroDeDocumento = "0623598456",
                            PaisId = 7,
                            SubAreaId = 1,
                            TipoDeDocumentoId = 2
                        },
                        new
                        {
                            Id = 5,
                            Apellidos = "Reyes Ramos",
                            AreaId = 1,
                            FechaDeContratacion = new DateOnly(2024, 1, 6),
                            Nombres = "Mónica Alejandra",
                            NumeroDeDocumento = "555141659",
                            PaisId = 6,
                            SubAreaId = 2,
                            TipoDeDocumentoId = 1
                        },
                        new
                        {
                            Id = 6,
                            Apellidos = "Nuila Santos",
                            AreaId = 1,
                            FechaDeContratacion = new DateOnly(2024, 1, 6),
                            Nombres = "Alejandro Andrés",
                            NumeroDeDocumento = "654658987",
                            PaisId = 3,
                            SubAreaId = 2,
                            TipoDeDocumentoId = 2
                        });
                });

            modelBuilder.Entity("WebhelpChallengeBackend.Domain.Entities.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Paises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Canadá"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Estados Unidos"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "México"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Guatemala"
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "Belice"
                        },
                        new
                        {
                            Id = 6,
                            Nombre = "El Salvador"
                        },
                        new
                        {
                            Id = 7,
                            Nombre = "Honduras"
                        },
                        new
                        {
                            Id = 8,
                            Nombre = "Nicaragua"
                        },
                        new
                        {
                            Id = 9,
                            Nombre = "Costa Rica"
                        },
                        new
                        {
                            Id = 10,
                            Nombre = "Panamá"
                        });
                });

            modelBuilder.Entity("WebhelpChallengeBackend.Domain.Entities.SubArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubAreas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Financiamiento"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Auditoría"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Contrataciones"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Capacitación y Desarrollo"
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "Ventas"
                        },
                        new
                        {
                            Id = 6,
                            Nombre = "Publicidad"
                        },
                        new
                        {
                            Id = 7,
                            Nombre = "Gestión de Proveedores"
                        },
                        new
                        {
                            Id = 8,
                            Nombre = "Inventario"
                        },
                        new
                        {
                            Id = 9,
                            Nombre = "Planificación"
                        },
                        new
                        {
                            Id = 10,
                            Nombre = "Soporte Técnico"
                        },
                        new
                        {
                            Id = 11,
                            Nombre = "Desarrollo de Software y Bases de Datos"
                        },
                        new
                        {
                            Id = 12,
                            Nombre = "Redes e Infraestructura"
                        });
                });

            modelBuilder.Entity("WebhelpChallengeBackend.Domain.Entities.TipoDeDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TiposDeDocumento");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "DUI"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Pasaporte"
                        });
                });

            modelBuilder.Entity("WebhelpChallengeBackend.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebhelpChallengeBackend.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebhelpChallengeBackend.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebhelpChallengeBackend.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebhelpChallengeBackend.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebhelpChallengeBackend.Domain.Entities.Empleado", b =>
                {
                    b.HasOne("WebhelpChallengeBackend.Domain.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebhelpChallengeBackend.Domain.Entities.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebhelpChallengeBackend.Domain.Entities.SubArea", "SubArea")
                        .WithMany()
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebhelpChallengeBackend.Domain.Entities.TipoDeDocumento", "TipoDeDocumento")
                        .WithMany()
                        .HasForeignKey("TipoDeDocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Pais");

                    b.Navigation("SubArea");

                    b.Navigation("TipoDeDocumento");
                });
#pragma warning restore 612, 618
        }
    }
}
